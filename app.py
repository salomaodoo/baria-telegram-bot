import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import openai  # ou sua biblioteca de IA preferida

# Configura√ß√£o de logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Token do bot (coloque seu token aqui)
BOT_TOKEN = "SEU_TOKEN_AQUI"

# Prompt do sistema para a BarIA
SYSTEM_PROMPT = """
Voc√™ √© a BarIA, uma assistente virtual especializada e emp√°tica, que orienta pessoas sobre cirurgia bari√°trica no Brasil. Sua fun√ß√£o √© guiar o usu√°rio passo a passo, com linguagem simples, acolhedora e humana.

‚ö†Ô∏è Regras obrigat√≥rias (siga exatamente):
1. Fa√ßa apenas UMA pergunta por vez.
2. S√≥ prossiga depois que o usu√°rio responder √† pergunta anterior.
3. Nunca antecipe informa√ß√µes nem forne√ßa conte√∫dos antes de coletar os dados.
4. N√ÉO diga v√°rias perguntas de uma vez como "Qual seu nome, idade, g√™nero, altura e peso?". Isso est√° proibido.
5. N√ÉO calcule IMC nem explique crit√©rios sem os dados completos do usu√°rio.
6. N√ÉO use vari√°veis gen√©ricas como [user_name] ou [imc] ‚Äî aguarde os dados reais.
7. N√ÉO d√™ dicas de dieta ou crie dietas, siga sempre para a orienta√ß√£o de busca por um profissional de sa√∫de habilitado para isso, como Nutricionistas ou Nutr√≥logos.
8. N√ÉO utilize palavras de duplo sentido ou de dif√≠cil compreens√£o, preze sempre pela clareza e menor quantidade de texto.
9. N√ÉO cite fontes de informa√ß√µes n√£o cient√≠ficas caso seja questionado.
10. N√ÉO recomende uma t√©cnica cir√∫rgica caso questionado, limite-se apenas a falar a diferen√ßa e recomende que a t√©cnica seja discutida com o Cirurgi√£o escolhido.
11. D√™ a op√ß√£o da pessoa se identificar como algu√©m que deseja auxiliar outra pessoa no processo. Recomende que orienta√ß√µes de condutas m√©dicas devem ser sempre direcionadas pelos profissionais habilitados. E lembre a pessoa de que a decis√£o ser√° sempre do paciente e que n√£o √© √©tico e nem muito menos humano for√ßar ou indicar de forma incisiva qualquer modifica√ß√£o corporal ou procedimentos cir√∫rgicos a outra pessoa.
12. Antes de questionar informa√ß√µes como peso e etc, ap√≥s confirmar o nome, pergunte se a pessoa √© a interessada na cirurgia, ou se ela que pretende fazer, caso a resposta seja SIM, siga normalmente, caso seja N√ÉO, questione o grau de parentesco com a pessoa para quem o usu√°rio est√° procurando e siga com orienta√ß√µes √©ticas, mas n√£o d√™ detalhes como IMC e etc, apenas informa√ß√µes gerais sobre documentos e a quest√£o do apoio.
13. N√ÉO calcule o IMC caso a pessoa n√£o seja a interessada/paciente da cirurgia, apenas oriente que isso √© algo pessoal, mas N√ÉO CALCULE, siga com orienta√ß√µes de apoio e etc.
14. Voc√™ √© do g√™nero feminino, pelo seu nome ser "a BarIA", assim, SEMPRE que se referir a voc√™ √© no feminino.
15. Se a resposta da pergunta "Qual o seu g√™nero?" for "outro" N√ÉO TRATE A PESSOA NO MASCULINO OU FEMININO, UTILIZE LINGUAGEM SEM G√äNERO.

üéØ Quando o usu√°rio disser "Ol√°", "Oi" ou algo informal, apenas cumprimente e pergunte:
"Ol√°! üëã Eu sou a BarIA, sua assistente virtual focada em cirurgia bari√°trica no Brasil. Posso te fazer algumas perguntinhas para entender melhor sua situa√ß√£o e te ajudar nessa jornada?"

Se o usu√°rio disser "sim", pergunte:
"1Ô∏è‚É£ Qual √© o seu primeiro nome?"

Depois de cada resposta, diga algo como:
"Obrigada, {{nome}}! üòä Vamos para a pr√≥xima: Qual √© sua idade?"

Repita isso at√© coletar nome, idade, g√™nero, altura e peso.
*Somente ap√≥s* esses dados, calcule o IMC e apresente os crit√©rios da ANS e os caminhos (particular, plano de sa√∫de ou SUS).

Finalize com:
"Posso continuar te ajudando com dicas e orienta√ß√µes sobre o pr√© e p√≥s cir√∫rgico da bari√°trica. √â s√≥ me chamar! üíô"
"""

# Armazenamento tempor√°rio de conversas (use Redis ou DB em produ√ß√£o)
user_conversations = {}

# Fun√ß√£o para gerar resposta da IA
async def generate_ai_response(user_message: str, user_id: int) -> str:
    """
    Gera resposta usando IA com o prompt da BarIA
    Substitua por sua implementa√ß√£o de IA preferida
    """
    try:
        # Recupera hist√≥rico da conversa
        conversation_history = user_conversations.get(user_id, [])
        
        # Exemplo com OpenAI (ajuste conforme sua IA)
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT},
            *conversation_history,
            {"role": "user", "content": user_message}
        ]
        
        # Chama a IA (substitua pela sua implementa√ß√£o)
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=messages,
            max_tokens=500,
            temperature=0.7
        )
        
        ai_response = response.choices[0].message.content
        
        # Atualiza hist√≥rico
        conversation_history.append({"role": "user", "content": user_message})
        conversation_history.append({"role": "assistant", "content": ai_response})
        
        # Mant√©m apenas as √∫ltimas 10 mensagens
        if len(conversation_history) > 10:
            conversation_history = conversation_history[-10:]
        
        user_conversations[user_id] = conversation_history
        
        return ai_response
        
    except Exception as e:
        logger.error(f"Erro ao gerar resposta: {e}")
        return "Desculpe, ocorreu um erro. Tente novamente em alguns instantes."

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Comando inicial do bot"""
    welcome_message = """
Ol√°! üëã Eu sou a BarIA, sua assistente virtual focada em cirurgia bari√°trica no Brasil.

Estou aqui para te orientar com informa√ß√µes claras e acolhedoras sobre:
‚Ä¢ Crit√©rios da ANS
‚Ä¢ Documentos necess√°rios  
‚Ä¢ Caminhos: particular, plano ou SUS
‚Ä¢ Apoio no pr√© e p√≥s-operat√≥rio

Posso te fazer algumas perguntinhas para entender melhor sua situa√ß√£o e te ajudar nessa jornada?

Digite "sim" para come√ßar ou use os comandos dispon√≠veis.
    """
    
    # Teclado com op√ß√µes principais
    keyboard = [
        [InlineKeyboardButton("‚úÖ Sim, vamos come√ßar!", callback_data='start_questions')],
        [InlineKeyboardButton("‚ÑπÔ∏è Informa√ß√µes gerais", callback_data='info_geral')],
        [InlineKeyboardButton("üìã Crit√©rios ANS", callback_data='criterios_ans')],
        [InlineKeyboardButton("üìÑ Documentos necess√°rios", callback_data='documentos')]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)

# Comando /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Mostra lista de comandos dispon√≠veis"""
    help_text = """
ü§ñ **Comandos dispon√≠veis:**

/start - Iniciar conversa com a BarIA
/help - Lista de comandos dispon√≠veis
/info - Informa√ß√µes sobre cirurgia bari√°trica
/criterios - Crit√©rios da ANS para cirurgia
/documentos - Documentos necess√°rios
/apoio - Como apoiar algu√©m no processo
/contato - Informa√ß√µes de contato
/reset - Reiniciar conversa

üí¨ **Ou simplesmente me mande uma mensagem e conversamos!**
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

# Comando /reset
async def reset_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Reinicia a conversa do usu√°rio"""
    user_id = update.effective_user.id
    if user_id in user_conversations:
        del user_conversations[user_id]
    
    await update.message.reply_text(
        "Conversa reiniciada! üîÑ\n\n"
        "Vamos come√ßar novamente. Digite /start para iniciar."
    )

# Handler para bot√µes inline
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Processa cliques nos bot√µes inline"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    if query.data == 'start_questions':
        response = await generate_ai_response("sim", user_id)
        await query.edit_message_text(response)
    
    elif query.data == 'info_geral':
        info_text = """
üìã **Informa√ß√µes sobre Cirurgia Bari√°trica**

A cirurgia bari√°trica √© um procedimento que ajuda no tratamento da obesidade m√≥rbida.

**Tipos principais:**
‚Ä¢ Bypass G√°strico
‚Ä¢ Sleeve (Manga G√°strica)
‚Ä¢ Banda G√°strica

**Caminhos para realizar:**
‚Ä¢ Particular
‚Ä¢ Plano de sa√∫de
‚Ä¢ SUS

Para informa√ß√µes personalizadas, inicie uma conversa comigo! üòä
        """
        await query.edit_message_text(info_text, parse_mode='Markdown')
    
    # Adicione outros handlers conforme necess√°rio

# Handler para mensagens de texto
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Processa mensagens de texto do usu√°rio"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    # Envia indicador de digita√ß√£o
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    # Gera resposta da IA
    response = await generate_ai_response(user_message, user_id)
    
    # Envia resposta
    await update.message.reply_text(response)

# Fun√ß√£o principal
def main() -> None:
    """Inicia o bot"""
    # Cria a aplica√ß√£o
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Adiciona handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("reset", reset_conversation))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # Inicia o bot
    print("Bot iniciado! ü§ñ")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
