import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import os
from flask import Flask

# Configura√ß√£o do bot - USANDO VARI√ÅVEL DE AMBIENTE
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente")

bot = telebot.TeleBot(BOT_TOKEN)

# Configura√ß√£o do Flask para manter o servi√ßo ativo
app = Flask(__name__)

@app.route('/')
def home():
    return {
        "status": "BarIA Bot est√° rodando!",
        "bot_info": "Assistente virtual para cirurgia bari√°trica",
        "timestamp": "online"
    }

@app.route('/webhook', methods=['POST'])
def webhook():
    # Endpoint para webhook (se necess√°rio)
    return "OK"

# Estados do usu√°rio
class UserState:
    INITIAL = "initial"
    WAITING_NAME = "waiting_name"
    WAITING_AGE = "waiting_age"
    WAITING_GENDER = "waiting_gender"
    WAITING_HEIGHT = "waiting_height"
    WAITING_WEIGHT = "waiting_weight"
    WAITING_PATIENT_CONFIRMATION = "waiting_patient_confirmation"
    WAITING_RELATIONSHIP = "waiting_relationship"
    COMPLETED = "completed"
    GENERAL_CHAT = "general_chat"

# Armazenamento de dados do usu√°rio
user_sessions = {}

class UserData:
    def __init__(self):
        self.state = UserState.INITIAL
        self.name = ""
        self.age = ""
        self.gender = ""
        self.height = ""
        self.weight = ""
        self.is_patient = None
        self.relationship = ""

def get_user_data(user_id):
    if user_id not in user_sessions:
        user_sessions[user_id] = UserData()
    return user_sessions[user_id]

def set_user_state(user_id, state):
    user_data = get_user_data(user_id)
    user_data.state = state

def calculate_imc(weight, height):
    """Calcula o IMC"""
    try:
        weight_kg = float(weight)
        height_m = float(height) / 100  # converte cm para metros
        imc = weight_kg / (height_m ** 2)
        return round(imc, 2)
    except:
        return None

def get_imc_classification(imc):
    """Classifica o IMC"""
    if imc < 18.5:
        return "Baixo peso"
    elif imc < 25:
        return "Peso normal"
    elif imc < 30:
        return "Sobrepeso"
    elif imc < 35:
        return "Obesidade grau I"
    elif imc < 40:
        return "Obesidade grau II"
    else:
        return "Obesidade grau III (obesidade m√≥rbida)"

def get_ans_criteria_message(imc):
    """Retorna mensagem sobre crit√©rios da ANS"""
    if imc >= 40:
        return "‚úÖ Voc√™ atende aos crit√©rios da ANS para cirurgia bari√°trica (IMC ‚â• 40)."
    elif imc >= 35:
        return "‚ö†Ô∏è Voc√™ pode atender aos crit√©rios da ANS se tiver comorbidades associadas (diabetes, hipertens√£o, apneia do sono, etc.)."
    else:
        return "‚ùå Pelo IMC atual, voc√™ n√£o atende aos crit√©rios b√°sicos da ANS para cirurgia bari√°trica."

def get_pathways_message():
    """Retorna mensagem sobre caminhos para cirurgia"""
    return """
üè• **Caminhos para cirurgia bari√°trica:**

**üîπ Particular:**
- Mais r√°pido
- Escolha livre do cirurgi√£o
- Custo: R$ 15.000 a R$ 50.000

**üîπ Plano de Sa√∫de:**
- Cobertura obrigat√≥ria pela ANS
- Per√≠odo de car√™ncia: 24 meses
- Necess√°ria avalia√ß√£o multidisciplinar

**üîπ SUS:**
- Gratuito
- Fila de espera mais longa
- Dispon√≠vel em centros especializados
"""

# Handlers de comandos
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    user_data.state = UserState.INITIAL
    
    response = """Ol√°! üëã Eu sou a BarIA, sua assistente virtual focada em cirurgia bari√°trica no Brasil. Posso te fazer algumas perguntinhas para entender melhor sua situa√ß√£o e te ajudar nessa jornada?"""
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("Sim, vamos come√ßar! üòä", callback_data="start_questions"))
    keyboard.add(InlineKeyboardButton("S√≥ quero conversar", callback_data="general_chat"))
    
    bot.send_message(message.chat.id, response, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == "start_questions")
def start_questions(call):
    user_id = call.from_user.id
    set_user_state(user_id, UserState.WAITING_NAME)
    
    bot.edit_message_text(
        "1Ô∏è‚É£ Qual √© o seu primeiro nome?",
        call.message.chat.id,
        call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == "general_chat")
def general_chat(call):
    user_id = call.from_user.id
    set_user_state(user_id, UserState.GENERAL_CHAT)
    
    bot.edit_message_text(
        "Perfeito! Estou aqui para te ajudar com d√∫vidas sobre cirurgia bari√°trica. Pode me perguntar qualquer coisa! üíô",
        call.message.chat.id,
        call.message.message_id
    )

# Handler para mensagens de texto
@bot.message_handler(func=lambda message: True)
def handle_text_message(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    text = message.text.strip()
    
    # Sauda√ß√µes iniciais
    if text.lower() in ['ol√°', 'oi', 'hello', 'hey', 'bom dia', 'boa tarde', 'boa noite']:
        if user_data.state == UserState.INITIAL:
            handle_start(message)
            return
    
    # Fluxo de coleta de dados
    if user_data.state == UserState.WAITING_NAME:
        handle_name_input(message, user_data)
    elif user_data.state == UserState.WAITING_PATIENT_CONFIRMATION:
        handle_patient_confirmation(message, user_data)
    elif user_data.state == UserState.WAITING_RELATIONSHIP:
        handle_relationship_input(message, user_data)
    elif user_data.state == UserState.WAITING_AGE:
        handle_age_input(message, user_data)
    elif user_data.state == UserState.WAITING_GENDER:
        handle_gender_input(message, user_data)
    elif user_data.state == UserState.WAITING_HEIGHT:
        handle_height_input(message, user_data)
    elif user_data.state == UserState.WAITING_WEIGHT:
        handle_weight_input(message, user_data)
    elif user_data.state == UserState.GENERAL_CHAT or user_data.state == UserState.COMPLETED:
        handle_general_question(message, user_data)
    else:
        bot.reply_to(message, "Desculpe, n√£o entendi. Digite /start para come√ßar novamente.")

def handle_name_input(message, user_data):
    user_data.name = message.text.strip()
    set_user_state(message.from_user.id, UserState.WAITING_PATIENT_CONFIRMATION)
    
    bot.reply_to(message, f"Obrigada, {user_data.name}! üòä\n\n2Ô∏è‚É£ Voc√™ √© a pessoa interessada na cirurgia bari√°trica, ou est√° buscando informa√ß√µes para auxiliar outra pessoa?")

def handle_patient_confirmation(message, user_data):
    text = message.text.lower().strip()
    
    if any(word in text for word in ['sim', 'sou', 'eu', 'pr√≥pria', 'mesmo', 'para mim']):
        user_data.is_patient = True
        set_user_state(message.from_user.id, UserState.WAITING_AGE)
        bot.reply_to(message, f"Perfeito, {user_data.name}! Vamos continuar.\n\n3Ô∏è‚É£ Qual √© a sua idade?")
    
    elif any(word in text for word in ['n√£o', 'outra', 'outra pessoa', 'algu√©m', 'familiar']):
        user_data.is_patient = False
        set_user_state(message.from_user.id, UserState.WAITING_RELATIONSHIP)
        bot.reply_to(message, f"Entendi, {user_data.name}. √â muito importante o apoio da fam√≠lia nessa jornada!\n\n3Ô∏è‚É£ Qual √© o seu grau de parentesco com a pessoa interessada?")
    
    else:
        bot.reply_to(message, "Por favor, me diga se voc√™ √© a pessoa interessada na cirurgia ou se est√° buscando informa√ß√µes para auxiliar outra pessoa.")

def handle_relationship_input(message, user_data):
    user_data.relationship = message.text.strip()
    
    message_text = f"""Obrigada pela informa√ß√£o, {user_data.name}! 

üíô **Orienta√ß√µes importantes sobre apoio:**

‚Ä¢ As orienta√ß√µes m√©dicas devem sempre ser direcionadas pelos profissionais habilitados
‚Ä¢ A decis√£o ser√° sempre da pessoa interessada na cirurgia
‚Ä¢ N√£o √© √©tico nem humano for√ßar ou indicar de forma incisiva qualquer modifica√ß√£o corporal ou procedimentos cir√∫rgicos a outra pessoa
‚Ä¢ Seu papel √© oferecer apoio emocional e acompanhar nas consultas, se solicitado

**Informa√ß√µes gerais sobre documentos necess√°rios:**
- RG e CPF
- Cart√£o do SUS ou plano de sa√∫de
- Comprovante de resid√™ncia
- Exames m√©dicos (ser√£o solicitados pelo cirurgi√£o)

Posso continuar te ajudando com orienta√ß√µes gerais sobre o pr√© e p√≥s cir√∫rgico. √â s√≥ me chamar! üíô"""
    
    set_user_state(message.from_user.id, UserState.COMPLETED)
    bot.reply_to(message, message_text)

def handle_age_input(message, user_data):
    try:
        age = int(message.text.strip())
        if age < 16 or age > 100:
            bot.reply_to(message, "Por favor, digite uma idade v√°lida.")
            return
        
        user_data.age = str(age)
        set_user_state(message.from_user.id, UserState.WAITING_GENDER)
        bot.reply_to(message, f"Obrigada, {user_data.name}! üòä\n\n4Ô∏è‚É£ Qual √© o seu g√™nero? (masculino/feminino/outro)")
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para a idade.")

def handle_gender_input(message, user_data):
    gender = message.text.strip().lower()
    
    if gender in ['masculino', 'homem', 'macho', 'm']:
        user_data.gender = 'masculino'
    elif gender in ['feminino', 'mulher', 'femea', 'f']:
        user_data.gender = 'feminino'
    elif gender in ['outro', 'outros', 'n√£o-bin√°rio', 'nao-binario', 'nb']:
        user_data.gender = 'outro'
    else:
        bot.reply_to(message, "Por favor, digite: masculino, feminino ou outro.")
        return
    
    set_user_state(message.from_user.id, UserState.WAITING_HEIGHT)
    bot.reply_to(message, f"Obrigada, {user_data.name}! üòä\n\n5Ô∏è‚É£ Qual √© a sua altura? (em cent√≠metros, ex: 170)")

def handle_height_input(message, user_data):
    try:
        height = float(message.text.strip())
        if height < 100 or height > 250:
            bot.reply_to(message, "Por favor, digite uma altura v√°lida em cent√≠metros (ex: 170).")
            return
        
        user_data.height = str(height)
        set_user_state(message.from_user.id, UserState.WAITING_WEIGHT)
        bot.reply_to(message, f"Obrigada, {user_data.name}! üòä\n\n6Ô∏è‚É£ Qual √© o seu peso atual? (em quilos, ex: 85)")
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para a altura (ex: 170).")

def handle_weight_input(message, user_data):
    try:
        weight = float(message.text.strip())
        if weight < 30 or weight > 300:
            bot.reply_to(message, "Por favor, digite um peso v√°lido em quilos.")
            return
        
        user_data.weight = str(weight)
        set_user_state(message.from_user.id, UserState.COMPLETED)
        
        # Calcular IMC e enviar relat√≥rio completo
        send_complete_report(message, user_data)
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para o peso (ex: 85).")

def send_complete_report(message, user_data):
    imc = calculate_imc(user_data.weight, user_data.height)
    classification = get_imc_classification(imc)
    ans_criteria = get_ans_criteria_message(imc)
    pathways = get_pathways_message()
    
    # Adapta√ß√£o de linguagem baseada no g√™nero
    if user_data.gender == 'masculino':
        pronoun = "voc√™"
        article = "o"
    elif user_data.gender == 'feminino':
        pronoun = "voc√™"
        article = "a"
    else:  # outro
        pronoun = "voc√™"
        article = ""
    
    report = f"""Perfeito, {user_data.name}! Aqui est√° {article} sua an√°lise completa:

üìä **Seus dados:**
‚Ä¢ Nome: {user_data.name}
‚Ä¢ Idade: {user_data.age} anos
‚Ä¢ Altura: {user_data.height} cm
‚Ä¢ Peso: {user_data.weight} kg

üî¢ **IMC:** {imc} ({classification})

{ans_criteria}

{pathways}

üí° **Pr√≥ximos passos:**
1. Consulte um cirurgi√£o bari√°trico qualificado
2. Realize avalia√ß√£o multidisciplinar
3. Fa√ßa exames pr√©-operat√≥rios

Posso continuar te ajudando com dicas e orienta√ß√µes sobre o pr√© e p√≥s cir√∫rgico da bari√°trica. √â s√≥ me chamar! üíô"""
    
    bot.reply_to(message, report)

def handle_general_question(message, user_data):
    """Lida com perguntas gerais sobre cirurgia bari√°trica"""
    text = message.text.lower()
    
    # Aqui voc√™ pode adicionar respostas para perguntas frequentes
    if any(word in text for word in ['dieta', 'alimenta√ß√£o', 'comer', 'comida']):
        response = f"Oi, {user_data.name}! Para orienta√ß√µes sobre dieta, √© essencial buscar um profissional de sa√∫de habilitado, como Nutricionistas ou Nutr√≥logos. Eles poder√£o te ajudar de forma personalizada! ü•ó"
    
    elif any(word in text for word in ['t√©cnica', 'bypass', 'sleeve', 'banda']):
        response = f"Existem diferentes t√©cnicas cir√∫rgicas, {user_data.name}. Cada uma tem suas indica√ß√µes espec√≠ficas. Recomendo que discuta as op√ß√µes com o cirurgi√£o escolhido, pois ele avaliar√° qual √© a melhor para o seu caso! üë®‚Äç‚öïÔ∏è"
    
    elif any(word in text for word in ['recupera√ß√£o', 'p√≥s-operat√≥rio', 'depois']):
        response = f"A recupera√ß√£o √© fundamental, {user_data.name}! Geralmente inclui repouso, acompanhamento nutricional e psicol√≥gico. O cirurgi√£o te dar√° todas as orienta√ß√µes espec√≠ficas para seu caso! üè•"
    
    else:
        response = f"Oi, {user_data.name}! Estou aqui para ajudar com d√∫vidas sobre cirurgia bari√°trica. Pode ser mais espec√≠fica sobre o que gostaria de saber? üíô"
    
    bot.reply_to(message, response)

# Fun√ß√£o para rodar o bot
def run_bot():
    print("ü§ñ BarIA iniciada! Bot rodando...")
    bot.infinity_polling()

# Inicializa√ß√£o
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    
    # Rodar Flask e bot em threads separadas
    import threading
    
    # Thread para o bot
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # Rodar Flask (para Railway/Render)
    app.run(host='0.0.0.0', port=port, debug=False)
