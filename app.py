#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BarIA Bot v3.0 - Bot para c√°lculo de IMC e orienta√ß√µes sobre cirurgia bari√°trica
"""

import os
import time
import threading
import logging
from flask import Flask, request
import telebot
from telebot import types

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes do bot
BOT_TOKEN = os.environ.get('BOT_TOKEN')
WEBHOOK_URL = os.environ.get('WEBHOOK_URL')
ENVIRONMENT = os.environ.get('ENVIRONMENT', 'development')

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

# Estados do usu√°rio
class UserState:
    GENERAL_CHAT = "general_chat"
    WAITING_NAME = "waiting_name"
    WAITING_AGE = "waiting_age"
    WAITING_HEIGHT = "waiting_height"
    WAITING_WEIGHT = "waiting_weight"
    QUICK_IMC_HEIGHT = "quick_imc_height"
    QUICK_IMC_WEIGHT = "quick_imc_weight"
    COMPLETED = "completed"

# Dados do usu√°rio
class UserData:
    def __init__(self):
        self.name = ""
        self.age = ""
        self.height = ""
        self.weight = ""
        self.state = UserState.GENERAL_CHAT

# Armazenamento em mem√≥ria
user_sessions = {}
user_states = {}

def get_user_data(user_id):
    if user_id not in user_sessions:
        user_sessions[user_id] = UserData()
    return user_sessions[user_id]

def set_user_state(user_id, state):
    user_states[user_id] = state
    user_sessions[user_id].state = state

def get_user_state(user_id):
    return user_states.get(user_id, UserState.GENERAL_CHAT)

def cleanup_old_sessions():
    """Remove sess√µes antigas"""
    # Implementar l√≥gica de limpeza se necess√°rio
    pass

def calculate_imc(weight, height):
    """Calcula o IMC"""
    try:
        weight_kg = float(weight)
        height_m = float(height) / 100  # converter cm para metros
        imc = weight_kg / (height_m ** 2)
        return round(imc, 1)
    except (ValueError, ZeroDivisionError):
        return 0

def get_imc_classification(imc):
    """Retorna classifica√ß√£o do IMC e emoji"""
    if imc < 18.5:
        return "Abaixo do peso", "‚¨áÔ∏è"
    elif imc < 25:
        return "Peso normal", "‚úÖ"
    elif imc < 30:
        return "Sobrepeso", "‚ö†Ô∏è"
    elif imc < 35:
        return "Obesidade grau I", "üî¥"
    elif imc < 40:
        return "Obesidade grau II", "üî¥üî¥"
    else:
        return "Obesidade grau III", "üî¥üî¥üî¥"

def create_main_menu():
    """Cria menu principal"""
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    btn1 = types.KeyboardButton("üìù Cadastro Completo")
    btn2 = types.KeyboardButton("üßÆ Calcular IMC")
    btn3 = types.KeyboardButton("‚ùì Fazer Pergunta")
    btn4 = types.KeyboardButton("üìä Meus Dados")
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    return markup

def is_restricted_question(text):
    """Verifica se √© uma pergunta restrita"""
    restricted_keywords = [
        "medicamento", "rem√©dio", "dose", "posologia", "prescri√ß√£o",
        "diagn√≥stico", "tratamento espec√≠fico", "cirurgia urgente"
    ]
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in restricted_keywords)

def get_restriction_message():
    """Mensagem para perguntas restritas"""
    return """‚ö†Ô∏è Esta pergunta envolve orienta√ß√£o m√©dica espec√≠fica.

üè• Para sua seguran√ßa, consulte sempre um profissional de sa√∫de qualificado para:
‚Ä¢ Prescri√ß√µes de medicamentos
‚Ä¢ Diagn√≥sticos m√©dicos  
‚Ä¢ Tratamentos espec√≠ficos

üíô Posso ajudar com informa√ß√µes gerais sobre cirurgia bari√°trica!"""

def get_smart_response(question, user_data):
    """Gera resposta inteligente para perguntas gerais"""
    question_lower = question.lower()
    
    # Respostas sobre cirurgia bari√°trica
    if any(word in question_lower for word in ["bari√°trica", "bariatrica", "cirurgia", "opera√ß√£o"]):
        return """üè• <b>Sobre Cirurgia Bari√°trica:</b>

A cirurgia bari√°trica √© indicada para:
‚Ä¢ IMC ‚â• 40 kg/m¬≤
‚Ä¢ IMC ‚â• 35 kg/m¬≤ com comorbidades

<b>Principais t√©cnicas:</b>
‚Ä¢ Bypass G√°strico
‚Ä¢ Sleeve (Manga G√°strica)
‚Ä¢ Banda G√°strica

<b>Benef√≠cios:</b>
‚Ä¢ Perda de peso significativa
‚Ä¢ Melhora do diabetes
‚Ä¢ Redu√ß√£o da press√£o arterial
‚Ä¢ Melhora da qualidade de vida

‚ö†Ô∏è <i>Sempre consulte um cirurgi√£o especialista!</i>"""
    
    # Resposta padr√£o
    return """üíô Obrigado pela pergunta! 

Para informa√ß√µes espec√≠ficas sobre cirurgia bari√°trica, recomendo:

üè• <b>Consultar especialistas:</b>
‚Ä¢ Cirurgi√£o bari√°trico
‚Ä¢ Endocrinologista
‚Ä¢ Nutricionista

üì± <b>Use o bot para:</b>
‚Ä¢ Calcular seu IMC
‚Ä¢ Entender crit√©rios b√°sicos
‚Ä¢ Informa√ß√µes gerais

<i>Sua sa√∫de √© importante - busque orienta√ß√£o m√©dica profissional!</i>"""

# Webhook route
@app.route('/webhook', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK"

# Handlers do bot
@bot.message_handler(commands=['start'])
def start_command(message):
    user_name = message.from_user.first_name or "amigo(a)"
    welcome_text = f"""ü§ñ <b>Ol√°, {user_name}! Bem-vindo ao BarIA Bot!</b>

üíô Sou seu assistente para informa√ß√µes sobre cirurgia bari√°trica.

<b>O que posso fazer:</b>
‚Ä¢ üìù Cadastro completo com orienta√ß√µes
‚Ä¢ üßÆ C√°lculo r√°pido de IMC
‚Ä¢ ‚ùì Responder d√∫vidas gerais
‚Ä¢ üìä Gerenciar seus dados

<b>Escolha uma op√ß√£o abaixo:</b>"""
    
    markup = create_main_menu()
    bot.reply_to(message, welcome_text, reply_markup=markup, parse_mode='HTML')
    set_user_state(message.from_user.id, UserState.GENERAL_CHAT)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    current_state = get_user_state(user_id)
    
    # Comandos do menu
    if message.text == "üìù Cadastro Completo":
        set_user_state(user_id, UserState.WAITING_NAME)
        bot.reply_to(message, "1Ô∏è‚É£ Vamos come√ßar! Qual √© o seu nome?")
        return
    
    elif message.text == "üßÆ Calcular IMC":
        set_user_state(user_id, UserState.QUICK_IMC_HEIGHT)
        bot.reply_to(message, "1Ô∏è‚É£ Digite sua altura em cent√≠metros (exemplo: 170):")
        return
    
    elif message.text == "‚ùì Fazer Pergunta":
        set_user_state(user_id, UserState.GENERAL_CHAT)
        bot.reply_to(message, "üí¨ Fa√ßa sua pergunta sobre cirurgia bari√°trica:")
        return
    
    elif message.text == "üìä Meus Dados":
        if user_data.name:
            response = f"""üìä <b>Seus dados salvos:</b>

‚Ä¢ Nome: {user_data.name}
‚Ä¢ Idade: {user_data.age} anos
‚Ä¢ Altura: {user_data.height} cm
‚Ä¢ Peso: {user_data.weight} kg"""
            
            if user_data.height and user_data.weight:
                imc = calculate_imc(user_data.weight, user_data.height)
                classification, emoji = get_imc_classification(imc)
                response += f"\n‚Ä¢ IMC: {imc} kg/m¬≤ {emoji}\n‚Ä¢ Classifica√ß√£o: {classification}"
        else:
            response = "üìù Voc√™ ainda n√£o fez seu cadastro completo. Use 'üìù Cadastro Completo' para come√ßar!"
        
        markup = create_main_menu()
        bot.reply_to(message, response, reply_markup=markup, parse_mode='HTML')
        return
    
    # Estados espec√≠ficos
    if current_state == UserState.WAITING_NAME:
        handle_name_input(message, user_data)
    elif current_state == UserState.WAITING_AGE:
        handle_age_input(message, user_data)
    elif current_state == UserState.WAITING_HEIGHT:
        handle_height_input(message, user_data)
    elif current_state == UserState.WAITING_WEIGHT:
        handle_weight_input(message, user_data)
    elif current_state == UserState.QUICK_IMC_HEIGHT:
        handle_quick_imc_height(message, user_data)
    elif current_state == UserState.QUICK_IMC_WEIGHT:
        handle_quick_imc_weight(message, user_data)
    else:
        handle_general_question(message, user_data)

def handle_name_input(message, user_data):
    name = message.text.strip()
    if len(name) < 2 or len(name) > 50:
        bot.reply_to(message, "‚ö†Ô∏è Nome deve ter entre 2 e 50 caracteres. Tente novamente:")
        return
    
    user_data.name = name
    set_user_state(message.from_user.id, UserState.WAITING_AGE)
    bot.reply_to(message, f"2Ô∏è‚É£ Prazer, {name}! Qual √© a sua idade?")

def handle_age_input(message, user_data):
    try:
        age = int(message.text.strip())
        if age < 16 or age > 100:
            bot.reply_to(message, "‚ö†Ô∏è Idade inv√°lida. Digite sua idade (16-100 anos):")
            return
        
        user_data.age = str(age)
        set_user_state(message.from_user.id, UserState.WAITING_HEIGHT)
        bot.reply_to(message, "3Ô∏è‚É£ Qual √© a sua altura em cent√≠metros? (exemplo: 170)")
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para a idade:")

def handle_height_input(message, user_data):
    try:
        height_text = message.text.strip().replace(',', '.').replace('cm', '').replace('m', '')
        height = float(height_text)
        
        if height < 100 or height > 250:
            bot.reply_to(message, "‚ö†Ô∏è Altura inv√°lida. Digite a altura em cent√≠metros (exemplo: 170)")
            return
        
        user_data.height = str(int(height))
        set_user_state(message.from_user.id, UserState.WAITING_WEIGHT)
        bot.reply_to(message, f"6Ô∏è‚É£ E qual √© o seu peso atual? (exemplo: 85 kg)")
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para a altura (exemplo: 170)")

def handle_weight_input(message, user_data):
    try:
        weight_text = message.text.strip().replace(',', '.').replace('kg', '')
        weight = float(weight_text)
        
        if weight < 30 or weight > 300:
            bot.reply_to(message, "‚ö†Ô∏è Peso inv√°lido. Digite o peso em quilogramas (exemplo: 85)")
            return
        
        user_data.weight = str(weight)
        
        # Calcular IMC e gerar resposta personalizada
        imc = calculate_imc(user_data.weight, user_data.height)
        classification, emoji = get_imc_classification(imc)
        
        response = f"""‚úÖ <b>Perfil completo, {user_data.name}!</b>

üìä <b>Seus dados:</b>
‚Ä¢ Idade: {user_data.age} anos
‚Ä¢ Altura: {user_data.height} cm
‚Ä¢ Peso: {user_data.weight} kg
‚Ä¢ IMC: {imc} kg/m¬≤ {emoji}
‚Ä¢ Classifica√ß√£o: {classification}

"""
        
        # Orienta√ß√£o baseada no IMC
        if imc >= 40:
            response += """üéØ <b>Orienta√ß√£o:</b>
Voc√™ atende ao crit√©rio de IMC ‚â• 40 kg/m¬≤ para cirurgia bari√°trica. Recomendo consultar um cirurgi√£o especialista para avalia√ß√£o completa!"""
        elif imc >= 35:
            response += """üéØ <b>Orienta√ß√£o:</b>
Voc√™ tem IMC ‚â• 35 kg/m¬≤. Para cirurgia bari√°trica, seria necess√°rio tamb√©m ter comorbidades (diabetes, hipertens√£o, apneia do sono, etc.). Consulte um m√©dico especialista!"""
        elif imc >= 30:
            response += """üéØ <b>Orienta√ß√£o:</b>
Voc√™ est√° na faixa de obesidade grau I. A cirurgia bari√°trica geralmente √© indicada para IMC ‚â• 35 kg/m¬≤ com comorbidades ou ‚â• 40 kg/m¬≤. Consulte um endocrinologista primeiro!"""
        else:
            response += """üéØ <b>Orienta√ß√£o:</b>
Seu IMC n√£o est√° na faixa para cirurgia bari√°trica (‚â• 35 kg/m¬≤ com comorbidades ou ‚â• 40 kg/m¬≤). Consulte um nutricionista ou endocrinologista para orienta√ß√£o adequada!"""
        
        set_user_state(message.from_user.id, UserState.COMPLETED)
        markup = create_main_menu()
        bot.reply_to(message, response, reply_markup=markup, parse_mode='HTML')
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para o peso (exemplo: 85)")

def handle_quick_imc_height(message, user_data):
    try:
        height_text = message.text.strip().replace(',', '.').replace('cm', '').replace('m', '')
        height = float(height_text)
        
        if height < 100 or height > 250:
            bot.reply_to(message, "‚ö†Ô∏è Altura inv√°lida. Digite a altura em cent√≠metros (exemplo: 170)")
            return
        
        user_data.height = str(int(height))
        set_user_state(message.from_user.id, UserState.QUICK_IMC_WEIGHT)
        bot.reply_to(message, "2Ô∏è‚É£ Agora digite seu peso em quilogramas (exemplo: 85):")
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para a altura (exemplo: 170)")

def handle_quick_imc_weight(message, user_data):
    try:
        weight_text = message.text.strip().replace(',', '.').replace('kg', '')
        weight = float(weight_text)
        
        if weight < 30 or weight > 300:
            bot.reply_to(message, "‚ö†Ô∏è Peso inv√°lido. Digite o peso em quilogramas (exemplo: 85)")
            return
        
        # Calcular IMC
        imc = calculate_imc(str(weight), user_data.height)
        classification, emoji = get_imc_classification(imc)
        
        response = f"""üßÆ <b>Resultado do IMC:</b>

üìä <b>Dados:</b>
‚Ä¢ Altura: {user_data.height} cm
‚Ä¢ Peso: {weight} kg
‚Ä¢ IMC: {imc} kg/m¬≤ {emoji}
‚Ä¢ Classifica√ß√£o: {classification}

"""
        
        # Orienta√ß√£o baseada no IMC
        if imc >= 40:
            response += """üéØ <b>Orienta√ß√£o:</b>
IMC ‚â• 40 kg/m¬≤ atende ao crit√©rio para cirurgia bari√°trica. Consulte um cirurgi√£o especialista!"""
        elif imc >= 35:
            response += """üéØ <b>Orienta√ß√£o:</b>
IMC ‚â• 35 kg/m¬≤. Para cirurgia bari√°trica, seria necess√°rio ter tamb√©m comorbidades. Consulte um m√©dico especialista!"""
        elif imc >= 30:
            response += """üéØ <b>Orienta√ß√£o:</b>
Obesidade grau I. Cirurgia bari√°trica geralmente indicada para IMC ‚â• 35 com comorbidades ou ‚â• 40. Consulte um endocrinologista!"""
        else:
            response += """üéØ <b>Orienta√ß√£o:</b>
IMC n√£o est√° na faixa para cirurgia bari√°trica. Consulte um nutricionista ou endocrinologista para orienta√ß√£o adequada!"""
        
        set_user_state(message.from_user.id, UserState.GENERAL_CHAT)
        markup = create_main_menu()
        bot.reply_to(message, response, reply_markup=markup, parse_mode='HTML')
    
    except ValueError:
        bot.reply_to(message, "Por favor, digite apenas n√∫meros para o peso (exemplo: 85)")

def handle_general_question(message, user_data):
    """Handler para perguntas gerais usando sistema inteligente"""
    try:
        # Verificar novamente se √© pergunta restrita
        if is_restricted_question(message.text):
            markup = create_main_menu()
            bot.reply_to(message, get_restriction_message(), reply_markup=markup, parse_mode='HTML')
            return
        
        # Obter resposta inteligente
        smart_response = get_smart_response(message.text, user_data)
        
        # Enviar resposta
        markup = create_main_menu()
        bot.reply_to(message, f"{smart_response}\n\nüíô <i>Outras d√∫vidas?</i>", reply_markup=markup, parse_mode='HTML')
    
    except Exception as e:
        logger.error(f"Error in general question handler: {e}")
        markup = create_main_menu()
        bot.reply_to(message, "Ops! Tive um probleminha. Pode tentar novamente?", reply_markup=markup)

# Fun√ß√£o de limpeza peri√≥dica
def periodic_cleanup():
    """Executa limpeza peri√≥dica das sess√µes"""
    while True:
        try:
            time.sleep(3600)  # 1 hora
            cleanup_old_sessions()
            logger.info("Periodic cleanup completed")
        except Exception as e:
            logger.error(f"Error in periodic cleanup: {e}")

# Configura√ß√£o do webhook
def setup_webhook():
    try:
        if ENVIRONMENT == 'production' and WEBHOOK_URL:
            webhook_url = f"{WEBHOOK_URL}/webhook"
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=webhook_url)
            logger.info(f"Webhook configurado: {webhook_url}")
        else:
            bot.remove_webhook()
            logger.info("Webhook removido - modo desenvolvimento")
    except Exception as e:
        logger.error(f"Erro ao configurar webhook: {e}")

# Fun√ß√£o principal
def main():
    try:
        logger.info("Iniciando BarIA Bot v3.0...")
        logger.info(f"Environment: {ENVIRONMENT}")
        
        # Configurar webhook se em produ√ß√£o
        if ENVIRONMENT == 'production':
            setup_webhook()
            
            # Iniciar thread de limpeza
            cleanup_thread = threading.Thread(target=periodic_cleanup, daemon=True)
            cleanup_thread.start()
            
            # Iniciar Flask
            port = int(os.environ.get('PORT', 5000))
            app.run(host='0.0.0.0', port=port)
        else:
            # Modo desenvolvimento - polling
            logger.info("Iniciando modo polling...")
            bot.remove_webhook()
            
            # Thread de limpeza
            cleanup_thread = threading.Thread(target=periodic_cleanup, daemon=True)
            cleanup_thread.start()
            
            # Polling
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
    
    except Exception as e:
        logger.error(f"Erro cr√≠tico: {e}")
        raise

if __name__ == '__main__':
    main()
